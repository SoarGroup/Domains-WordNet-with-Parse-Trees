# This agent is a test of the recognition capabilities of Soar.
# It is designed to show that recognition can reduce the number of retrievals to get information from memory and, if possible, the average amount of time taken per retrieval.
# This agent works with an environment that provides a deep tree structure on the input link -- such as a parse tree of a sentence -- and a pointer to a particular node on which more information is required -- such as the sense of the word.
# It is assumed that there is some way of getting this information from long-term memory, which the basic agent will use retrievals to access.
# However, a more cognitively sophisticated agent may use recognition to screen the cues, which would prevent useless retrievals.
# Once information is found, or if the agent gives up, the agent signals the environment with its answer, after which the environment returns feedback.
# After the agent acknowledges the feedback, the environment presents the next structure and the next pointer, and this continues until there are no more requests for information.

# parameters:
# (<params> ^recog << epmem smem >>) # multivalued

# input-link structure:
# (<input-link> ^status << request feedback done >>
#               ^structure ...
#               ^request <request>
#               ^feedback <feedback>)
# (<request> ^word <word>
#            ^path ...
#            ^path-direct <node>)
# (<feedback> ^correct << yes no >>
#             ^answer ...)

# output-link structure:
# (<output-link> ^answer <answer>)
# (<answer> ^senseid [0-9]*
#           ^source << epmem smem >>)

epmem --set learning on
epmem --set trigger dc
epmem --set phase selection
epmem --set exclusions path-direct
epmem --set exclusions recog-cache
smem --set learning on

sp {propose*init-agent
    (state <s> ^superstate nil
               -^name)
-->
    (<s> ^operator.name init-agent)
}

sp {apply*init-agent
    (state <s> ^operator.name init-agent
               ^epmem <epmem>
               ^smem <smem>
               ^io.output-link <ol>)
-->
    (<s> ^name recog
         ^stats <stats>)
    (<epmem> ^recog-cache.sentence-num -1)
    (<smem> ^recog-cache.sentence-num -1)
    (<stats> ^epmem <estats>
             ^smem <sstats>
             ^total 0)
    (<estats> ^recognized 0
              ^retrievals-attempted 0
              ^retrieved 0
              ^correct 0)
    (<sstats> ^recognized 0
              ^retrievals-attempted 0
              ^retrieved 0
              ^correct 0)
    (<ol> ^feedback.done yes)
}

sp {recog*propose*cache-recognition
    (state <s> ^name 
               ^io.input-link <il>
               ^epmem.recog-cache.sentence-num {<n> <> <k>}
               ^smem.recog-cache.sentence-num {<n> <> <k>})
    (<il> ^status request
          ^sentence-num <k>)
-->
    (<s> ^operator <o> + >)
    (<o> ^name cache-recognition)
}

sp {recog*apply*cache-recognition*make-root
    (state <s> ^operator.name cache-recognition
               ^io.input-link.sentence-num <n>
               ^<< smem epmem >> <mem>)
-->
    (<mem> ^recog-cache.sentence-num <n>)
}

sp {recog*apply*cache-recognition*skip
    (state <s> ^operator.name cache-recognition
               ^io.input-link.sentence-num <n>
               ^<< smem epmem >> <mem>)
    (<mem> ^recog-cache <cache>
           ^recog-cache <old-cache>
           -^metamem.unrecognized <unrecog>)
    (<cache> ^sentence-num <n>)
    (<old-cache> -^sentence-num <n>)
-->
    (<mem> ^recog-cache <old-cache> -)
}

sp {recog*apply*cache-recognition*copy
    (state <s> ^operator.name cache-recognition
               ^io.input-link.sentence-num <n>
               ^<< smem epmem >> <mem>)
    (<mem> ^recog-cache <cache>
           ^metamem.unrecognized <unrecog>)
    (<cache> ^sentence-num <n>)
    (<unrecog> ^<attr> <parent>)
-->
    (<cache> ^<attr> <parent>)
}

sp {recog*apply*cache-recognition*done
    (state <s> ^operator.name << init-agent cache-recognition >>
               ^io.input-link.sentence-num <n>
               ^<< smem epmem >> <mem>)
    (<mem> ^recog-cache <cache>
           ^recog-cache <old-cache>
           ^metamem.unrecognized <unrecog>)
    (<cache> ^sentence-num <n>)
    (<old-cache> -^sentence-num <n>)
    -{
        (<unrecog> ^<attr> <parent>)
        -(<cache> ^<attr> <parent>)
    }
-->
    (<mem> ^recog-cache <old-cache> -)
}

sp {recog*apply*multiple*remove-feedback-command
    (state <s> ^operator.name << cache-recognition retrieve-epmem retrieve-smem no-answer >>
               ^io.output-link <ol>)
    (<ol> ^feedback <feedback>)
    (<feedback> ^status complete)
-->
    (<ol> ^feedback <feedback> -)
}

sp {recog*prefer*retrieve-epmem*retrieve-smem
    (state <s> ^name recog
               ^operator <epmem> +
               ^operator <smem> +)
    (<epmem> ^name retrieve-epmem)
    (<smem> ^name retrieve-smem)
-->
    (<s> ^operator <epmem> > <smem>)
}

sp {recog*propose*retrieve-epmem
    (state <s> ^name recog
               ^io.input-link <il>
               ^params.epmem-retrieve yes
               -^epmem.recog-cache.sentence-num {<> <n>}
               -^result
               -^retrieve-epmem a-okay)
    (<il> ^status request
          ^sentence-num <n>)
-->
    (<s> ^operator.name retrieve-epmem)
}

sp {recog*apply*retrieve-epmem*no-recog
    (state <s> ^operator.name retrieve-epmem
               -^params.epmem-recog yes)
-->
    (<s> ^epmem-recog a-okay)
}

sp {recog*apply*retrieve-epmem*recog*failure
    (state <s> ^operator.name retrieve-epmem
               ^params.epmem-recog yes
               ^epmem <epmem>
               ^io.input-link.request <request>)
    -{
        (<epmem> -^recog-cache.<word> <node>
                 -^metamem.unrecognized.<word> <node>)
    }
    (<request> ^word <word>
               ^path-direct <node>)
-->
    (<s> ^retrieve-epmem a-okay)
}

sp {recog*apply*retrieve-epmem*recog*success
    (state <s> ^operator.name retrieve-epmem
               ^params.epmem-recog yes
               -^epmem-recog a-okay
               ^epmem <epmem>
               ^stats.epmem <estats>
               ^io <io>)
    (<epmem> -^recog-cache.<word> <node>
             -^metamem.unrecognized.<word> <node>)
    (<io> ^input-link.request <request>
          -^output-link.feedback)
    (<request> ^word <word>
               ^path-direct <node>)
    (<estats> ^recognized <n>)
-->
    (<s> ^epmem-recog a-okay)
    (<estats> ^recognized <n> -
              ^recognized (+ <n> 1))
}

sp {recog*apply*retrieve-epmem*make-query
    (state <s> ^operator.name retrieve-epmem
               ^epmem-recog a-okay
               -^retrieve-epmem a-okay
               ^epmem.command <ecmd>
               ^stats.epmem <estats>
               ^io.input-link.request.path <path>)
    (<ecmd> -^query)
    (<estats> ^retrievals-attempted <n>)
-->
    (<ecmd> ^query.io.input-link <qil>)
    (<qil> ^status feedback
           ^request.path <path>)
    (<estats> ^retrievals-attempted <n> -
              ^retrievals-attempted (+ <n> 1))
}

sp {recog*apply*retrieve-epmem*process-epmem-results*success
    (state <s> ^operator.name retrieve-epmem
               ^stats.epmem <estats>
               ^epmem <epmem>
               -^retrieve-epmem a-okay)
    (<epmem> ^command.query
             ^result <eres>)
    (<eres> ^success
            ^graph-match 1
            ^retrieved.io.input-link.feedback.senseid <senseid>)
    (<estats> ^retrieved <n>)
-->
    (<s> ^result <result>
         ^retrieve-epmem a-okay)
    (<result> ^senseid <senseid>
              ^source epmem)
    (<estats> ^retrieved <n> -
              ^retrieved (+ <n> 1))
}

sp {recog*apply*retrieve-epmem*process-epmem-results*failure
    (state <s> ^operator.name retrieve-epmem
               -^retrieve-epmem a-okay
               ^epmem <epmem>)
    (<epmem> ^command <ecmd>
             ^result <result>)
    (<result> -^graph-match 1
              ^<< success failure >>)
    (<ecmd> ^query <eqry>)
-->
    (<s> ^retrieve-epmem a-okay)
}

sp {recog*propose*retrieve-smem
    (state <s> ^name recog
               ^io.input-link <il>
               ^params.smem-retrieve yes
               -^retrieve-smem a-okay
               -^epmem.recog-cache.sentence-num {<> <n>}
               -^result)
    (<il> ^status request
          ^sentence-num <n>)
-->
    (<s> ^operator.name retrieve-smem)
}

sp {recog*apply*retrieve-smem*no-recog
    (state <s> ^operator.name retrieve-smem
               -^params.smem-recog yes)
-->
    (<s> ^smem-recog a-okay)
}

sp {recog*apply*retrieve-smem*recog*failure
    (state <s> ^operator.name retrieve-smem
               ^params.smem-recog yes
               ^smem.metamem.unrecognized.<word>
               ^io.input-link.request.word <word>)
-->
    (<s> ^retrieve-smem a-okay)
}

sp {recog*apply*retrieve-smem*recog*success
    (state <s> ^operator.name retrieve-smem
               ^params.smem-recog yes
               -^smem-recog a-okay
               ^stats.smem <sstats>
               ^smem <smem>
               ^io <io>)
    (<io> ^input-link.request.word <word>
          -^output-link.feedback)
    -(<smem> ^metamem.unrecognized.<word>
             ^recog-cache.<word>)
    (<sstats> ^recognized <n>)
-->
    (<s> ^smem-recog a-okay)
    (<sstats> ^recognized <n> -
              ^recognized (+ <n> 1))
}

sp {recog*apply*retrieve-smem*make-query
    (state <s> ^operator.name retrieve-smem
               ^smem-recog a-okay
               ^stats.smem <sstats>
               ^smem.command <scmd>
               ^io.input-link.request <request>)
    (<request> ^word <word>)
    (<scmd> -^query)
    (<sstats> ^retrievals-attempted <n>)
-->
    (<scmd> ^query.<word> <any>)
    (<sstats> ^retrievals-attempted <n> -
              ^retrievals-attempted (+ <n> 1))
}

sp {recog*apply*retrieve-smem*process-smem-results*success
    (state <s> ^operator.name retrieve-smem
               ^stats.smem <sstats>
               ^smem <smem>)
    (<smem> ^command.query
            ^result <sres>)
    (<sres> ^success
            ^retrieved.senseid <senseid>)
    (<sstats> ^retrieved <n>)
-->
    (<s> ^result <result>
         ^retrieve-smem a-okay)
    (<result> ^senseid <senseid>
              ^source smem)
    (<sstats> ^retrieved <n> -
              ^retrieved (+ <n> 1))
}

sp {recog*apply*retrieve-smem*process-smem-results*failure
    (state <s> ^operator.name retrieve-smem
               ^smem <smem>)
    (<smem> ^command.query
            ^result.failure)
-->
    (<s> ^retrieve-smem a-okay)
}

sp {recog*propose*answer
    (state <s> ^name recog
               ^io <io>
               ^result <result>)
    (<io> ^input-link.status request)
-->
    (<s> ^operator.name answer)
}

sp {recog*apply*answer
    (state <s> ^operator.name answer
               ^result <result>
               ^io.output-link <ol>)
    (<result> ^senseid <senseid>
              ^source <source>)
-->
    (<s> ^result <result> -)
    (<ol> ^answer <answer>)
    (<answer> ^senseid <senseid>
              ^source <source>)
}

sp {recog*propose*no-answer
    (state <s> ^name recog
               ^io <io>
               -^result)
    (<io> ^input-link.status request
          -^output-link.answer)
-->
    (<s> ^operator <o> + <)
    (<o> ^name no-answer)
}

sp {recog*apply*no-answer
    (state <s> ^operator.name no-answer
               ^io.output-link <ol>)
-->
    (<ol> ^answer <answer>)
    (<answer> ^senseid none
              ^source none)
}

sp {recog*elab*recognized*epmem
    (state <s> ^name recog
               ^epmem-recog a-okay
               ^io.output-link.answer <answer>)
-->
    (<answer> ^epmem-recog a-okay)
}

sp {recog*elab*recognized*smem
    (state <s> ^name recog
               ^smem-recog a-okay
               ^io.output-link.answer <answer>)
-->
    (<answer> ^smem-recog a-okay)
}

sp {recog*propose*feedback
    (state <s> ^name recog
               ^io <io>)
    (<io> ^input-link <il>
          -^output-link.feedback)
    (<il> ^status feedback
          ^feedback.senseid <senseid>)
-->
    (<s> ^operator.name feedback)
}

sp {recog*apply*feedback*cleanup-queries
    (state <s> ^operator.name feedback
               ^<< epmem smem >>.command <cmd>)
    (<cmd> ^query <qry>)
-->
    (<cmd> ^query <qry> -)
}

sp {recog*apply*feedback*cleanup-flags
    (state <s> ^operator.name feedback
               ^<attr> a-okay)
-->
    (<s> ^<attr> a-okay -)
}

sp {recog*apply*feedback*cleanup-commands
    (state <s> ^operator.name feedback
               ^stats-updated yes
               ^io.output-link <ol>)
    (<ol> ^answer <answer>)
    (<answer> ^status complete)
-->
    (<ol> ^answer <answer> -)
}

sp {recog*apply*feedback*correct
    (state <s> ^operator.name feedback
               ^io.input-link.feedback.correct yes)
-->
    (<s> ^stored yes)
}

sp {recog*apply*feedback*update-stats
    (state <s> ^operator.name feedback
               ^io <io>
               ^stats.<source> <stats>
               -^stats-updated yes)
    (<io> ^input-link.feedback.correct yes
          ^output-link.answer.source <source>)
    (<stats> ^correct <n>)
-->
    (<s> ^stats-updated yes)
    (<stats> ^correct <n> -
             ^correct (+ <n> 1))
}

sp {recog*apply*feedback*incorrect*create-answer*make-root
    (state <s> ^operator.name feedback
               ^io.input-link.feedback.correct no
               -^smem.command.store
               -^correct-answer
               -^stored yes)
-->
    (<s> ^correct-answer <new>)
}

sp {recog*apply*feedback*incorrect*create-answer
    (state <s> ^operator.name feedback
               ^io.input-link <il>
               ^correct-answer <correct>
               -^stored yes)
    (<il> ^request.word <word>
          ^feedback <feedback>)
    (<feedback> ^correct no
                ^senseid <senseid>)
-->
    (<correct> ^<word> <new>
               ^senseid <senseid>)
}

sp {recog*apply*feedback*incorrect*store-answer
    (state <s> ^operator.name feedback
               ^correct-answer <correct>
               -^stored yes
               ^smem.command <scmd>)
    (<correct> ^{<attr> <> senseid}
               ^senseid)
-->
    (<s> ^correct-answer <correct> -)
    (<scmd> ^store <correct>)
}

sp {recog*apply*feedback*incorrect*store-answer*done
    (state <s> ^operator.name feedback
               ^smem <smem>)
    (<smem> ^command <scmd>
            ^result.success)
    (<scmd> ^store <store>)
-->
    (<s> ^stored yes
         ^stats-updated yes)
    (<scmd> ^store <store> -)
}

sp {recog*apply*feedback*cleanup
    (state <s> ^operator.name feedback
               ^stored yes
               ^stats-updated yes
               ^stats <stats>
               ^io.output-link <ol>)
    (<ol> -^answer)
    (<stats> ^total <n>)
-->
    (<s> ^stored yes -
         ^stats-updated yes -)
    (<ol> ^feedback.done yes)
    (<stats> ^total <n> -
             ^total (+ <n> 1))
}

sp {recog*propose*quit
    (state <s> ^io.input-link.status done)
-->
    #(write (cmd p -d 100 s4))
    (halt)
}
